How to use gdb with the verilog simulation of the lanai q.

0. what this is. it's a gdb simulator that sends gdb commands over a network
connection to the verilog q simulator to debug mcp code running in a lanai. first
your start the verilog simulator, and it will wait for you to connect the gdb
simulator to it. you run 1 gdb process per lanai and use gdb to load the mcp,
set breakpoints, etc.

1. SOURCE CODE

first make sure you already have a chips_svn/LanaiQ tree checked out. the
--with-lanaiqdir configure option for configuring gdb.git tells
gdb.git/lanai/sim/makefile where your "LanaiQ" project is checked out to -- it
points to the LanaiQ directory. the makefile needs this for a header file, gs.h.

also in order for the gdb stuff to be able read SM,

'`define SM_PLI' in LanaiQ/SM/SM_Config.h must be uncommented out before you
build the verilog stuff.

the gdb stuff is in a git repository.

2. BUILDING
git clone git://git.sw.myri.com/gdb.git
cd gdb.git
./configure --target=lanai --enable-sim  --with-lanaiqdir=/path/to/your/chips_svn/Lanai_Q  --prefix=/where/you/want/it
   make
   make install

you can skip the --prefix=/where/you/want/it and make install part if you don't
care about moving the gdb binary, if you do this, the binary will be just
gdb.git/gdb/gdb after you type make.

3. RUNNING THE VERILOG SIMULATION

set the ENABLE_GDB_SERVER environment variable (to anything).
export ENABLE_GDB_SERVER=

this tells the verilog simulator that you want to use gdb. (otherwise it ignores
all the gdb stuff).

by default gdb_server will accept gdb connections on port 1971. you can overrride
this with the GDB_SERVER_PORT environment variable. for instance

export GDB_SERVER_PORT=1991

4. RUNNING GDB

start the verilog simulator the usual way. see (LanaiQ/README and
Lanai_Q/Chip/_simulation/_Note). do not source any *.do files. gdb will take
care of setting the sram size and loading code. once vsim starts up and you get
the prompt, tell verilog to run "forever" by giving it a large run number. (if
this cycle count runs out then verilog will stop and you have to type something
like "run 10000000000" again. i don't know how to actually tell verilog to run
forever.

ankle% pwd
ankle% /nfs/home/finucane/chips_svn/Lanai_Q/Chip/_simulation
vsim.sv -c  Lanai_Q.Chip
Reading /ufs/cad/mentor/modeltech/tcl/vsim/pref.tcl 
Reading /nfs/home/finucane/chips_svn/Lanai_Q/Chip/_simulation/modelsim.tcl 
Lanai_Init: key=17280 lanai_queue_id=16252948

# 6.5c

# vsim -c Lanai_Q.Chip 

[...]

# Signal c0_model.clk found in current scope.
# Creating new board instance "Chip.c0"
VSIM 1> run 2000000000
# random seed is 1285306187, use PCIE_ROOT_SEED environment variable to reproduce this.
# lz_command_reader_t::connect failed
# Waiting to connect to one or more gdb proccess on port 1971...
# (Use the GDB_SERVER_PORT environment variable to set this.)


now verilog is waiting and you can start gdb. in the "sim connect" command
below, "ankle" is the name of the machine running the verilog simulation, and
1971 is the default port for gdb_server running on that machine (as part of the
verilog process).

Current directory is /nfs/home/finucane/chips_svn/Lanai_Q/Chip/_simulation/bin.lanai/
GNU gdb (GDB) 7.1
Copyright (C) 2010 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "--host=i686-pc-linux-gnu --target=lanai".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /nfs/home/finucane/chips_svn/Lanai_Q/Chip/_simulation/bin.lanai/mcp...done.
(gdb) target sim
Connected to the simulator.
(lanai) sim connect ankle 1971
Connected to gdb_server.
(lanai) load  /nfs/home/finucane/chips_svn/Lanai_Q/Chip/_simulation/bin.lanai/mcp
[0x2cfc] is 0x92
(lanai) b main
Breakpoint 1 at 0x2d08: file mcp.c, line 2537.
(lanai) r
Starting program: /nfs/home/finucane/chips_svn/Lanai_Q/Chip/_simulation/bin.lanai/mcp 

Program received signal SIGTRAP, Trace/breakpoint trap.
0x00002d0c in LBB82 () at mcp.c:2537
(lanai) list
2532	
2533	
2534	
2535	main ()
2536	{
2537	  int a = test ();
2538	  
2539	  config_inboxes();
2540	  a += test ();
2541	  config_dispatch();
(lanai) 



5. WHAT IS STILL BROKEN. 
   - next single steps instead of stepping over functions.
   - finish does not stop where it should. it ends up being just like
     continue. don't use it.
   - stopping at the very start of a function may give weird results when you do
     bt or where. this is because it might take a cycle more for the stack frame
     to be set up. if you see a total lie of a backtrace, try "sim cycle" to
     give the simulator a chance to finish setting up the stack frame.
   - register store is not implemented yet.


------------------------------------------------------------------------------------
below this line are some notes specific to porting gdb to a lanai target that
glenn wrote. none of us should have to read this stuff anymore.


Currently, this tree implements a lanai-gdb *SKELETON*.  Everything
works except actually controlling a remote simulation.

To make the gdb-7.1 with Lanai skeleton support:

  git clone -b lanai ~glenn/git/gdb.git
  cd gdb
  ./configure --target=lanai --prefix=/path
  make
  make install
	
Then everything that you expect to work works, except running and stepping:

  /path/bin/lanai-gdb
  GNU gdb (GDB) 7.1
  Copyright (C) 2010 Free Software Foundation, Inc.
  License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
  This is free software: you are free to change and redistribute it.
  There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
  and "show warranty" for details.
  This GDB was configured as "--host=x86_64-unknown-linux-gnu --target=lanai".
  For bug reporting instructions, please see:
  <http://www.gnu.org/software/gdb/bugs/>.
  (gdb) file /ufs/glenn/chips_svn/Lanai_Q/Chip/_simulation/mcp
  Reading symbols from /ufs/glenn/chips_svn/Lanai_Q/Chip/_simulation/mcp...done.
  (gdb) list main
  2542
  2543
  2544
  2545
  2546    main ()
  2547    {
  2548      config_inboxes();
  2549      config_dispatch();
  2550      config_sm();
  2551      config_qs();
  (gdb) info var
  All defined variables:
  
  File mcp.c:
  handler_t dispatch_table[64];
  char inbox0[1024];
  char inbox1[1024];
  char inbox2[1024];
  char inbox3[1024];
  char inbox4[1024];
  char inbox5[1024];
  char inbox6[1024];
  char inbox7[1024];
  unsigned char phy_bank[72];
  slice_open_rqst_t rqst;
  static pci_addr_t addr;
  static int i;
  static unsigned int i;
  static unsigned int *info;
  static unsigned int *info;
  static unsigned int *info;
  static unsigned int *info;
  (gdb) break main
  Breakpoint 1 at 0x2ca8: file mcp.c, line 2548.
